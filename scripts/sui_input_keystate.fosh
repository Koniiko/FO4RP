#ifndef __SUI_INPUT_KEYSTATE__
    #define __SUI_INPUT_KEYSTATE__
    #include "sui_input_converter.fosh"

    shared class KeyStateSUI
    {
        // Current key combination hash
        string KeyStateHash;

        // Zero preset constructor
        KeyStateSUI() final {
            this.Flush();
        }

        // By string name constructor
        KeyStateSUI(string name, string delimiter = " + ") {
            this.Flush();
            string@[] keyNames = splitEx(name, delimiter);
            // note: beware splitEx does not trim values, so remove excess spaces manually
            this.AddFromKeyNames(keyNames);
        }

        // By array of key names constructor
        KeyStateSUI(string@[] keyNames) {
            this.Flush();
            this.AddFromKeyNames(keyNames);
        }

        // Add from array of key names
        void AddFromKeyNames(string@[] keyNames) {
            InputConverterSUI@ ic = InputConverterSUI();
            for (uint8 i = 0, l = keyNames.length; i < l; i++) {
                this.KeyDown(ic.GetKeyCodeFromName(keyNames[i]));
            }
        }

        // By keyboard & mouse keys array constructor
        KeyStateSUI(uint8[]@ keyboardKeys, int[]@ mouseKeys) {
            this.Flush();       
            if (null !is keyboardKeys) this.AddFromKeys(keyboardKeys);
            if (null !is mouseKeys) this.AddFromMouseKeys(mouseKeys);
        }

        // Add pressed keys from array
        void AddFromKeys(uint8[] keys) {
            for (uint8 i = 0, l = keys.length; i < l; i++) {
                this.KeyDown(keys[i]);
            }
        }

        // Add pressed mouse keys from array
        void AddFromMouseKeys(int[] keys) {
            for (uint8 i = 0, l = keys.length; i < l; i++) {
                this.MouseDown(keys[i]);
            }
        }

        // Returns if mouse button is pressed
        bool GetMouseState(int key) final {
            return this.GetKeyState(key + 0xEE);
        }

        // Returns if key is pressed
        bool GetKeyState(uint8 key) final {
            uint8 sectionOffset = key % 8;
            uint8 innerOffset = key - sectionOffset;
            return 1 == (this.KeyStateHash[sectionOffset] >> innerOffset);
        }

        // Sets mouse button state
        void SetMouseState(int key, bool state) final {
            this.SetKeyState(key + 0xEE, state);
        }

        // Sets key state
        void SetKeyState(uint8 key, bool state) final {
            uint8 sectionOffset = key / 8;
            uint8 innerOffset = key % 8;
            this.KeyStateHash[sectionOffset] = state ? ( this.KeyStateHash[sectionOffset] | 1 << innerOffset) : (this.KeyStateHash[sectionOffset] & ~(1 << innerOffset));
        }

        // Press mouse button
        void MouseDown(int key) final {
            this.SetMouseState(key, true);
        }

        // Free mouse button
        void MouseUp(int key) final {
            this.SetMouseState(key, false);
        }

        // Press key
        void KeyDown(uint8 key) final {
            this.SetKeyState(key, true);
        }

        // Free key
        void KeyUp(uint8 key) final {
            this.SetKeyState(key, false);
        }

        // Checks if current key combination includes specified one
        bool Has(KeyStateSUI@ keyState) final {
            for (uint8 i = 0, l = this.KeyStateHash.length(); i < l; i++) {
                if (0 != keyState.KeyStateHash[i] && 0 == this.KeyStateHash[i] & keyState.KeyStateHash[i]) {
                    return false;
                }
            }
            return true;
        }

        // Checks if current key combination is complete match for specified one
        bool Is(KeyStateSUI@ keyState) final {
            return this.KeyStateHash == keyState.KeyStateHash;
        }

        // Free up all keys
        void Flush() final {
            this.KeyStateHash.resize(0);
            this.KeyStateHash.resize(32);
        }

        // Dumps key state name as readable key names array (aka {"F10", "MMB"})
        string@[] GetKeyNames() {
            string@[] keyNames;

            InputConverterSUI@ ic = InputConverterSUI();

            for (uint8 i = 0, l = this.KeyStateHash.length(); i < l; i++) {
                for (uint8 y = 0; y < 8; y++) {
                    if (0 != this.KeyStateHash[i] & (1 << y)) {
                        uint keyCode = 8 * i + y;
                        string name = ic.GetNameFromKeyCode(keyCode);
                        keyNames.insertLast(name);
                    }
                }
            }

            return keyNames;
        }

        // Dumps key state name as readable string (aka "F10 + MMB")
        string GetName(string delimiter = " + ") {
            string@[] names = this.GetKeyNames();
            return names.length > 0 ? join(names, delimiter) : "";
        }
    }
#endif