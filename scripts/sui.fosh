#ifndef __SUI__
    #define __SUI__

    #ifdef __CLIENT
        #include "sui_input.fosh"
    #endif

    shared interface EventListenerSUI {
        void OnEvent(EventSUI@ event);
    }

    shared interface LoopListenerSUI {
        void OnLoop();
    }

    shared class EventSUI {
        bool StopPropagation;

        EventSUI() { 
            this.StopPropagation = false;
        }
    }

    shared class EngineEventSUI : EventSUI {
        bool StopProcessing;

        EngineEventSUI() {
            super();
            this.StopProcessing = false;
        }
    }

    shared class ModuleSUI
    {
        EventListenerSUI@[] EventListeners;

        #ifdef __CLIENT
        HotkeyListenerSUI@ Hotkeys;
        #endif

        ModuleSUI() final {
            #ifdef __CLIENT
            @this.Hotkeys = HotkeyListenerSUI();
            this.EventListeners.insertLast(this.Hotkeys);
            #endif
        }

        bool Start() { return false;}

        void Loop() {
            // todo
        }

        //void Finish() {}

        // Engine hooks
        #ifdef __SERVER
            void Init() {}
        #endif

        #ifdef __CLIENT
            bool MouseDown(int key) {
                EngineEventSUI@ event = MouseStateEventSUI(key, true);
                this.Dispatch(event);
                if (3 == key || 4 == key) { // engine productes no /up/ events for mouse scroll
                    this.Dispatch(MouseStateEventSUI(key, false));
                }
                return event.StopProcessing;
            }

            bool MouseUp(int key) {
                EngineEventSUI@ event = MouseStateEventSUI(key, false);
                this.Dispatch(event);
                return event.StopProcessing;
            }

            bool KeyDown(uint8 key) {
                EngineEventSUI@ event = KeyboardStateEventSUI(key, true);
                this.Dispatch(event);
                return event.StopProcessing;
            }

            bool KeyUp(uint8 key) {
                EngineEventSUI@ event = KeyboardStateEventSUI(key, false);
                this.Dispatch(event);
                return event.StopProcessing;
            }

            void MouseMove(int x, int y) {
                InputEventSUI@ event = MouseMoveEventSUI(x, y);
                this.Dispatch(event);
            }

            void InputLost() {
                InputEventSUI@ event = InputLostEventSUI();
                this.Dispatch(event);
            }
        #endif

        bool Dispatch(EventSUI@ event) final {
            EngineEventSUI@ engineEvent = cast<EngineEventSUI>(event);

            for (uint i = 0, l = this.EventListeners.length; i < l; i++) {
                this.EventListeners[i].OnEvent(event);
                if (event.StopPropagation) break;
            }

            return null is engineEvent ? false : engineEvent.StopProcessing;
        }

        void AddEventListener(EventListenerSUI@ eventListener) final {
            this.EventListeners.insertLast(eventListener);
        }
    }

    #ifndef __MODULE_SUI__
        #define __MODULE_SUI__
        import ModuleSUI@ get_SUI() from "sui"; 
    #endif

#endif