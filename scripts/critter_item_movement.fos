#ifndef CRITTER_ITEM_MOVEMENT
#define CRITTER_ITEM_MOVEMENT

#include "_utils.fos"
#include "wait_time_h.fos"
#include "critter_item_movement_h.fos"
#include "sandbag_h.fos"
#include "furniture_h.fos"
#include "handcuffs_h.fos"

#ifdef __CLIENT
	# define Critter    CritterCl
	# define Item       ItemCl
#endif // __CLIENT

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.

bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
#ifndef __CLIENT
	if( cr.Anim2Life == ANIM2_WINDUP )
	{
		cr.ParamBase[ CR_IS_WINDUPED ] = 0;
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
	}
#endif // __CLIENT
	
    int fromSlot = item.CritSlot;
	const uint16 pid = item.GetProtoId( );

	if( item.Proto.Item_Subtype == ITEM_SUBTYPE_BONDAGE && item.BONDAGE_STATE == BONDAGE_STATE_ON )
    {
#ifdef __CLIENT
        Message( TEXTMSG_TEXT, STR_CANT_FREE_YOURSELF);
#endif //__CLIENT
		return false;
    }
#ifdef __SERVER	
	if( ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) && HandsTied( cr ) )
	{
#ifdef __CLIENT
        Message( TEXTMSG_TEXT, STR_CANT_FREE_YOURSELF );
#endif //__CLIENT
		cr.Say( SAY_NETMSG, "Untie hands to do that" );
		return false;
	}
#endif // __SERVER	
	if( pid == PID_WORKBENCH_TOKEN || pid == PID_FIREPLACE_TOKEN )
	{
#ifndef __CLIENT
        DeleteItem( item );
#endif // __CLIENT
		return true;
	}
	
    bool  moveFreeze = false,
          dropFreeze = false;

#ifndef __CLIENT
	if( toSlot == SLOT_GROUND )
	{
		uint16 itmPid = item.GetProtoId();
		if( itmPid == PID_SINGLE_SANDBAG || ContainersX1.find( itmPid ) != -1 )
		{
			Item@[] ground;
			Map@ map = cr.GetMap();
			if( map.GetItems( cr.HexX, cr.HexY, ground ) > 0 )
			{
				for( uint i = 0; i < ground.length(); i++ )
				{
					uint16 groundPid = ground[i].GetProtoId();
					
					uint16[] list;
					if( itmPid == PID_SINGLE_SANDBAG )
					{
						list = Sandbags;
					}
					else
					{
						list = ContainersX1;
					}
					
					if( list.find( groundPid ) != -1 )
					{
						cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MOVE_TO_PLACE );
						return false;
					}
				}
			}
		}

		LogItemMovement( cr, item, "puts on ground" );
		if( item.IsStackable() )
		{
			uint[] values = { item.Id };
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "e_stack_items", values, true );
		}
	}
	else
	{
		string actionStr = "";
		switch( toSlot )
		{
			case( SLOT_ARMOR ):
				actionStr = "puts on";
				break;
			case( SLOT_HAND1 ):
				actionStr = "takes in hand";
				break;
			case( SLOT_HAND2 ):
				actionStr = "takes in offhand";
				break;
			case( SLOT_MISC ):
				actionStr = "equips in misc";
				break;
			case( SLOT_HEAD ):
				actionStr = "puts on head";
				break;
			case( SLOT_BACK ):
				actionStr = "puts on back";
				break;
		}
		
		switch( fromSlot )
		{
			case( SLOT_ARMOR ):
				actionStr = "takes off";
				break;
			case( SLOT_HAND1 ):
				actionStr = "removes from hand";
				break;
			case( SLOT_HAND2 ):
				actionStr = "removes from offhand";
				break;
			case( SLOT_MISC ):
				actionStr = "removes from misc";
				break;
			case( SLOT_HEAD ):
				actionStr = "removes from head";
				break;
			case( SLOT_BACK ):
				actionStr = "removes from back";
				break;
		}
		LogItemMovement( cr, item, actionStr );
	}
#endif // __CLIENT
	
    // Drop
    if( toSlot == SLOT_GROUND )
	{
        return !dropFreeze;
	}	
	
	if( @itemSwap !is null )
	{
		if( itemSwap.Proto.Item_Subtype == ITEM_SUBTYPE_BONDAGE && itemSwap.BONDAGE_STATE == BONDAGE_STATE_ON )
		{
			#ifdef __CLIENT
			 Message( TEXTMSG_TEXT, STR_CANT_FREE_YOURSELF);
			#endif //__CLIENT
			return false;
		}
	}

    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( cr.IsPlayer() && valid( itemSwap ) && !handsSwap )
	{
        return false;
	}
	
    if( cr.IsPlayer() && moveFreeze && !handsSwap )
	{
        return false;
	}
	
    // Weapon animation
    if( cr.IsPlayer() && ( toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2 ) )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) )
		{
			#ifdef __CLIENT
			Message( TEXTMSG_TEXT, STR_NO_REQUIRED_ANIM ); 
            #endif // __CLIENT
			return false;
		}
		Item@ offhand = _CritGetItemHandExt( cr );
		if( valid( offhand ) )
		{
			if( offhand.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, offhand.Proto.Weapon_Anim1 ) )
			{
				#ifdef __CLIENT
				Message( TEXTMSG_TEXT, STR_NO_REQUIRED_ANIM );  
				#endif // __CLIENT
				return false;
			}
		}
    }

    // Armor animation
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
		{
            return false;
        }
		if( item.Proto.Slot != SLOT_INV )
		{
            return false;
		}
		uint16 pid = item.GetProtoId();
		uint16 skin = cr.Stat[ ST_BASE_CRTYPE ];
		if( skin == 0 )
		{
			skin = ( cr.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		}			
		bool isMutePlayer = skin_supermute.find( skin ) != -1,
			 isRoboPlayer = skin_robot.find( skin ) != -1,
			 isMuteArmor = armor_supermute_pids.find( pid ) != -1;
		
		if( isRoboPlayer || isMutePlayer != isMuteArmor )
		{
			return false;
		}
	}

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Proto.Slot )
		{
            return false;
		}
	}

    // Allow moving
    return true;
}

#ifdef __SERVER

#include "speed_h.fos"
#include "windup_h.fos"

// Call on critter item moved.

void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
	ChangeRunningAP( cr );
	uint8 toSlot = item.CritSlot;
	
	if( toSlot == SLOT_HEAD || fromSlot == SLOT_HEAD )
	{	
		ArmorEffects( cr, 1 );
		int signH = ( toSlot == SLOT_HEAD ? int(1) : -1 );
		switch( item.Proto.HeadItem_Perk )
        {
			case( HEAD_PERK_COOL ):
                cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
                break;
            case( HEAD_PERK_GLASSES ):
			{
				if( cr.StatBase[ ST_PERCEPTION ] <= 3 )
				{
					cr.StatBase[ ST_PERCEPTION_EXT ] += 2 * signH;
				}
                break;
			}
			case( HEAD_PERK_VERY_COOL ):
				cr.StatBase[ ST_CHARISMA_EXT ] += 2 * signH;
				break;
			case( HEAD_PERK_LUCKY_CHARM ):
				cr.StatBase[ ST_LUCK_EXT ] += 1 * signH;
				break;
			case( HEAD_PERK_COOL_LUCKY_CHARM ):
				cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
				cr.StatBase[ ST_LUCK_EXT ] += 1 * signH;
				break;
			case( HEAD_PERK_COOL_GLASSES ):
			{
				if( cr.StatBase[ ST_PERCEPTION ] <= 3 )
				{
					cr.StatBase[ ST_PERCEPTION_EXT ] += 2 * signH;
					cr.StatBase[ ST_CHARISMA_EXT ] += 1 * signH;
				}
				break;
			}
		}
		cr.StatBase[ ST_CURRENT_HEAD_ITEM_PERK ] = ( toSlot == SLOT_HEAD ? item.Proto.HeadItem_Perk : 0 );
		//face mask
		uint16 pid = item.GetProtoId();
		if( toSlot == SLOT_HEAD && HidefaceMasks.find( pid ) != -1 )
		{
			SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_FACE_MASK );
		}
		else
		{
			UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_FACE_MASK );
		}
		ArmorEffects( cr, 1 );
	}	
		
	if( cr.ParamBase[ CR_IS_WINDUPED ] != 0 && fromSlot == SLOT_HAND1 && item.GetType() == ITEM_TYPE_WEAPON )
	{
		ChangeWindup( cr, true );
	}
	
	//Armor skins change
	if( item.GetType() == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
	{
		bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
		uint armor_skin = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );
		uint skin_base = cr.Stat[ ST_BASE_CRTYPE ];
		
		if( skin_base == 0 )
		{
			skin_base = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		}
		
		uint crType = skin_base;
		
		uint16 pid = item.GetProtoId();

		if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D )
		{
			if( toSlot == SLOT_ARMOR )
			{
				if( skin_robe.find( armor_skin ) != -1 && skin_small.find( skin_base ) != -1 )
				{
					crType = CRTYPE_SMALL_ROBE;  //kids, dwarfs and goris
				}
				else // super mutants
				{
					if( skin_supermute.find( skin_base ) < skin_supermute.find( armor_skin ) ) {
						crType = armor_skin;
					}
					else // other skins
					{
						if( skin_armor.find( skin_base ) != -1 )
						{
							if( skin_armor.find( armor_skin ) > skin_armor.find( skin_base ) ) {
								crType = armor_skin; //Armor is equiped based on armor array position in comparison to skin
							}
							else
							{
								crType = skin_base;
							}
						}
						else if( skin_robe.find( skin_base ) != -1 )
						{
							if ( skin_armor.find( armor_skin ) != -1 )
							{
								crType = armor_skin; //Robes change for CA and PA only
							}
						}
						else // if default skin is not armor or robe
						{
							bool foundIt = false;
							int skin_armor_level = ( isMale ? skin_armor_levels_male.find( armor_skin ) : skin_armor_levels_female.find( armor_skin ) ) + 1;
							for( uint n = 0; n < skin_packs.length(); n++ )
							{ // get set for cr skin set
								int skin_level = skin_packs[n].find( skin_base );
								//if skin pack found
								if( skin_level >= 0 )
								{
									if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
									{
										cr.Say( SAY_NORM, skin_level + " -> " + (skin_armor_level+1) + " of " + skin_packs[n].length() );
									}
									
									if( skin_level < skin_armor_level && skin_packs[n].length() > uint( skin_armor_level + 1 ) )
									{
										crType = skin_packs[n][skin_armor_level];//change if armour level higher than skin
										foundIt = true;
									}
									break;
								}
							}
							
							if( !foundIt )
							{
								if( skin_armor.find( armor_skin ) != -1 || skin_robe.find( armor_skin ) != -1 )
								{
									crType = ArmorSkin( cr, armor_skin ); //CA and robes change any skin
								} else if( skin_male.find( skin_base ) != -1 || skin_female.find( skin_base ) != -1 || skin_ghoul.find( skin_base ) != -1 )
								{
									//reserved for social skin armour
								}
								else
								{ 
									//if default is socual skin
								}
							}
						}
					}
				}
				
				uint index = skin_armor.find( crType );
				if( skin_base == CRTYPE_BLACK_TRIBAL && index < 37 )
				{
					crType = 150;
				}
				
				//Power armor protection system
				if( item.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || item.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 )
				{
					PAAuth( cr, item );
				}
				
				//Flags for face, avatar and description hiding items
				if( HidefaceHoods.find( pid ) != -1 )
				{
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
				if( HidefaceArmor.find( pid ) != -1 )
				{
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_SUIT );
				}
				if( ArmorHelmets.find( pid ) != -1 )
				{
					SETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HELMET );
				}
			}
			else
			{
				if( HidefaceHoods.find( pid ) != -1 )
				{
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HOOD );
				}
				if( HidefaceArmor.find( pid ) != -1 )
				{
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_SUIT );
				}
				if( ArmorHelmets.find( pid ) != -1 )
				{
					UNSETFLAG( cr.ParamBase[ CR_HIDEFACE_ITM ], ITM_ARMOR_HELMET );
				}
			}
			ArmorEffects( cr, 1 );
		}
		
		if( cr.CrType != crType ) 
		{
			cr.ChangeCrType( crType );
			ChangeCritterSpeed( cr );
		}

        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );

        switch( item.Proto.Armor_Perk )
        {
			case( ARMOR_PERK_POWERED ):         // +3 strength, +30 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break; 
			case( ARMOR_PERK_COMBAT ):         // +20 radiation resist
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 20 * sign;
				break;
			case( ARMOR_PERK_ADVANCED_I ):     // +4 strength, +60 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break;
			case( ARMOR_PERK_ADVANCED_II ):         // +4 strength, +75 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break;
			case( ARMOR_PERK_CHARISMA ):         // +1 charisma
				cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
				break;
			case( ARMOR_PERK_ECZO ):         // +2 strength, +50 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 2 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 50 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break; 
			case( ARMOR_PERK_ECZO_2 ):         // +3 strength, +10 radiation resist
				cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 10 * sign;
				cr.StatBase[ ST_CARRY_WEIGHT ] += item.Proto.Weight * sign;
				break; 			
			case( ARMOR_PERK_UGLY ):         // -1 charisma
				cr.StatBase[ ST_CHARISMA_EXT ] -= 1 * sign;
				break;
			case( ARMOR_PERK_ANTIRAD ):         // +70 radiation resist
				cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 70 * sign;
				break;			
			case( ARMOR_PERK_VERY_COOL ):         // +2 charisma
				cr.StatBase[ ST_CHARISMA_EXT ] += 2 * sign;
				break;			
			default:
				break;
        }
        cr.StatBase[ ST_CURRENT_ARMOR_PERK ] = ( toSlot == SLOT_ARMOR ? item.Proto.Armor_Perk : 0 );
    }
	
	if( cr.IsNpc() )
	{
		cr.Wait( GetActionTime( ACTION_MOVE_ITEM, cr ) );
	}
	
	Item@ hand = _CritGetItemHand( cr );
	if( valid( hand ) )
	{
		if( hand.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, hand.Proto.Weapon_Anim1 ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_ANIM_FOR_MAIN_HAND );
			cr.MoveItem( hand.Id, hand.GetCount(), SLOT_INV );
		}
	}
	
	Item@ offhand = _CritGetItemHandExt( cr );
	if( valid( offhand ) )
	{
		if( offhand.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, offhand.Proto.Weapon_Anim1 ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_ANIM_FOR_OFF_HAND );
			cr.MoveItem( offhand.Id, offhand.GetCount(), SLOT_INV );
		}
	}
}

// ####################################################################################################
// #                                            PowerArmour auth                                      #
// ####################################################################################################
void PAAuth( Critter& cr, Item& armor )
{
	if( armor.ARMOR_BIOSCANNER == OWNER_CONFIRMED )
	{
		if( cr.Id == uint ( armor.ARMOR_OWNER ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PA_AUTH );
		}
		else
		{
			cr.AddTimeEvent( "cte_PAAuthFail", REAL_SECOND( 10 ), CTE_PA_AUTH, 0 ); 
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_PA_FAILSWITCH ); 
		}
	}
	else if( armor.ARMOR_BIOSCANNER == OWNER_PENDING )
	{ 
		armor.ARMOR_BIOSCANNER = OWNER_CONFIRMED; 
		armor.ARMOR_BIOSCANNER = cr.Id; 
	}
}

uint cte_PAAuthFail( Critter& cr, int identifier, uint& rate )
{
	Item@ armor = cr.GetItem( 0, SLOT_ARMOR );
	if( valid( armor ) && ( armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC45 || armor.Proto.Item_Subtype == ITEM_SUBTYPE_ARMOR_AC50 ) && armor.Val9 == 10 )
	{
		cr.MoveItem( armor.Id, 1, SLOT_GROUND );
		
		if( cr.Karma[ KARMA_SEPARATED ] == 0 ) //BOS aligment - need change for faction armours mechanics
		{ 
			cr.ToDead( ANIM2_DEAD_PULSE_DUST, null ); 
		}
		else
		{
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 0 ) ), 1000, cr.HexX, cr.HexY );
		}
	}
	return 0;
}

// ####################################################################################################
// #                                            Hide Face                                             #
// ####################################################################################################

void ArmorEffects( Critter& cr, int8 sign )
{
	bool hidename = B_Showname( cr );
	int QST = cr.Param[ QST_MEDIUM ];
	bool update = false;

	if( sign == 1 && hidename )
	{
		if( ABS( QST ) != 2 )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_HIDE_FACE );
			cr.ParamBase[ QST_MEDIUM ] = 2;
			update = true;
		}
	}
	else
	{
		if( QST == 2 )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SHOW_FACE );
			cr.ParamBase[ QST_MEDIUM ] = 0;
			update = true;
		}
	}

	Item@ item = cr.GetItem( 0, SLOT_ARMOR );
	if( valid( item ) )
	{
		uint PID = item.GetProtoId();
		if( PID == PID_POWERED_ARMOR || PID == PID_POWERED_ARMOR_NEVADA || PID == PID_HYENA_PA || PID == PID_HYENA_PA_MK2 )
		{
			cr.ChangeCrType( ArmorSkin( cr, CRTYPE_PA ) ); 
		}
		
		if( PID == PID_HARDENED_POWER_ARMOR )
		{ 
			cr.ChangeCrType( ArmorSkin( cr, CRTYPE_PA_HARDY ) ); 
		}
	}

	if( update )
	{
		Critter@[] crs;
		GetAllPlayers( crs );
		for( uint i = 0, l = crs.length(); i < l; i++ )
		{
			crs[ i ].RunClientScript( "client_main@NamesUpdater", 0, 0, 0, null, null );
		}
	}
}

bool B_Showname( Critter& cr )
{
	int param = cr.ParamBase[ CR_HIDEFACE_ITM ];
	
	if( FLAG( param, ITM_FACE_MASK ) )
	{
		return true;
	}
	else if( FLAG( cr.Param[ PLAYER_FLAGS ], ITEM_HIDDEN ) )
	{
		if( FLAG( param, ITM_ARMOR_HOOD ) || FLAG( param, ITM_ARMOR_SUIT ) )
		{
			return true;
		}
	}
	return false;
}

uint ArmorSkin( Critter& cr, uint skin )
{
	if( !B_Showname( cr ) )
	{
		if( skin == CRTYPE_PA )
		{
			if( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_SULIK_TRIBAL )
			{
				skin = CRTYPE_SULIK_PA;
			}
			else
			{
				skin = CRTYPE_PA_HEADLESS; 
			}
		}
		else if( skin == CRTYPE_PA_HARDY )
		{ 
			skin = CRTYPE_PA_HARDY_HEADLESS; 
		}
	}
	return skin;
}

//Autostack items upon drop to ground - maybe move to somwhere else
uint e_stack_items( uint[]@ values ) 
{
    uint itemId = values[0];
    Item@ item = GetItem( itemId );
	if( !valid( item ) )
	{
		return 0;
	}
	
    if( item.Accessory != ACCESSORY_HEX )
	{
		return 0;
	}
	
	uint16 x = 0, y = 0;
    Map@ map = item.GetMapPosition( x, y );

    Item@[] items;
    uint count = map.GetItems ( x, y, items );
    for( uint i = 0; i < count; i++ )
	{
        if( !valid( items[i] ) || !items[i].IsStackable() )
		{
			continue;
		}
		
        uint16 protoid = items[i].GetProtoId();
        uint itemCount = items[i].GetCount();

        for( uint j = i + 1; j < count; j++ )
		{
			if( !valid( items[j] ) )
			{
				continue;
			}

            if( protoid == items[j].GetProtoId() )
			{
                itemCount += items[j].GetCount();
                DeleteItem( items[j] );
                @items[j] = null;
            }
        }

        items[i].SetCount( itemCount );
		
		switch( protoid ) 
		{
			case( PID_BOTTLE_CAPS):
				CoinAmountChanger( items[i], itemCount );
				break;
			case( PID_SHELL_CASING):
				ShellAmountChanger( items[i], itemCount );
				break;
		}
        items[i].Update( );
    }
    return 0;
}

// Change PicMap for dropped coins - Util func
void CoinAmountChanger( Item& item, uint amount)
{
    if( amount <= 8 )
	{
		item.PicMap = CoinAmoutHash[ amount ];
	}
	else
	{
		item.PicMap = CoinAmoutHash[ 0 ];
	}
    item.Update();
}

// Change PicMap for shells - Util func
void ShellAmountChanger( Item& item, uint amount)
{
    if( amount <= 8 )
	{
		item.PicMap = ShellAmoutHash[ amount ];
	}
	else
	{
		item.PicMap = ShellAmoutHash[ 0 ];
	}
    item.Update();
}

// Steal container or armor
bool StealContainerOrArmor( Critter& cr, Critter@ targetCr, Item@ targetItem )
{
	bool LootedBackpack = false;
	Item@[] RuckSacks;
	
	bool isCritter = valid( targetCr );
	
	if( isCritter )
	{
		targetCr.GetItems( -1, RuckSacks );
	}
	else if( valid( targetItem ) )
	{
		targetItem.GetItems( uint( -1 ), RuckSacks );
	}
	else
	{
		return false;
	}
	
	for( uint i = 0, iEnd = RuckSacks.length(); i < iEnd; i++ )
	{
		int pid = RuckSacks[i].GetProtoId();
		bool isContainer = RuckSacks[i].GetType() == ITEM_TYPE_CONTAINER;
		bool isBag = (pid == PID_BAG);
		bool isPack = (pid == PID_BACKPACK);
		if( isBag || isPack || isContainer )
		{
			if( !isGM( cr ) )
			{
				uint action_text = isPack ? STR_EMOTE_TAKE_BACKPACK : STR_EMOTE_TAKE_ITEM;
				cr.SayMsg(SAY_EMOTE, TEXTMSG_TEXT, action_text );
				
				CrimeLog( cr, crInfo( cr ) + " has taken item from " + crInfo( targetCr ) );
				
				MoveItem( RuckSacks[i], 1, cr.GetMap(), cr.HexX, cr.HexY );
				
				uint victim_text = isPack ? STR_CANT_RESIST_BACKPACK : STR_CANT_RESIST_ITEM;
				targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, victim_text );
				cr.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 15 );
			}
			else
			{
				MoveItem( RuckSacks[i], 1, cr );
				
				uint containerRemoval = isPack ? STR_YOU_TAKE_BACKPACK : STR_YOU_TAKE_ITEM;
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, containerRemoval );
				
				CrimeLog( cr, crInfo( cr ) + " takes item with gm power " + crInfo( targetCr ) );
			}
			LootedBackpack = true;
			return true;
		}
	}
	
	if( isCritter && !LootedBackpack )
	{
		Item@[] armors;
		uint count = targetCr.GetItems( SLOT_ARMOR, armors );
		if( count == 0 || !valid( armors[0] ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DID_NOTHING );
			return true;
		}
		
		CrimeLog( cr, crInfo( cr ) + " is trying to take armor off " + crInfo( targetCr ) );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ATTEMPT_TAKE_ARMOR );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_TAKE_EVERYTHING );
		targetCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ARMOR_IS_BEING_REMOVED );
		
		if( uint( cr.Stat[ ST_LAST_STEAL_CR_ID ] ) == targetCr.Id )
		{
			cr.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 15 );
			cr.StatBase[ ST_STEAL_COUNT ] ++;
			TryToTakeArmor( cr, targetCr );
		}
		else
		{
			if( isGM( cr ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GM_TAKE_ARMOR );
				CrimeLog( cr, crInfo( cr ) + " takes armour by GM powers from " + crInfo( targetCr ) );
				cr.StatBase[ ST_STEAL_COUNT ] = 7;
				TryToTakeArmor( cr, targetCr );
			}
			cr.StatBase[ ST_STEAL_COUNT ] = 0;
			cr.StatBase[ ST_LAST_STEAL_CR_ID ] = targetCr.Id;
		}
		return true;
	}
	return false;
}

int[][] armor_delay =
{
	{ PID_POWERED_ARMOR, PID_HARDENED_POWER_ARMOR, PID_ADVANCED_POWER_ARMOR, PID_ADVANCED_POWER_ARMOR_MK2 },
	{ PID_PURPLE_ROBE, PID_BLACK_ROBE, PID_SANDROBE },
	{ PID_LEATHER_JACKET, PID_CURED_LEATHER_ARMOR, PID_CURED_LEATHER_ARMOR_MK_II },
	{ PID_LEATHER_ARMOR, PID_LEATHER_ARMOR_MK_II, PID_LEATHER_ARMOR_MK_III },
	{ PID_METAL_ARMOR, PID_METAL_ARMOR_MK_II, PID_TESLA_ARMOR},
};

void TryToTakeArmor( Critter& cr, Critter& target ) 
{
	bool success = false;
	Item@[] armors;
	uint count = target.GetItems( SLOT_ARMOR, armors );
	
	if( count == 0 || !valid( armors[0] ) )
	{
		return;
	}
	
	int armor = armors[0].GetProtoId();
	
	if( armor_delay[0].find( armor ) != -1 ) // Cant take power armour off
	{
		return;
	}
	
	uint delay = cr.Stat[ST_STEAL_COUNT], i = 1, iEnd = armor_delay.length();
	for( ; i < iEnd; i++ )
	{
		if( armor_delay[i].find( armor ) != -1 )
		{
			success = true;
			break;
		}
	}
	
	if( delay >= 6 )
	{ 
		success = true;
	}
	
	if( success && delay >= i)
	{
		MoveItem( armors[0], 1, cr );
		target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOUR_ARMOR_REMOVED );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_TAKE_ARMOR );
		CrimeLog( cr, crInfo( cr ) + " takes armour from " + crInfo( target ) );
	}
	else
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_PARTIALLY_TAKE_ARMOR );
	}
}

//weight check for running AP calculations
void ChangeRunningAP( Critter& cr )
{
	uint[] armorPerks = { ARMOR_PERK_POWERED, ARMOR_PERK_ADVANCED_I, ARMOR_PERK_ADVANCED_II, ARMOR_PERK_ECZO, ARMOR_PERK_ECZO_2 };
	bool powerArmor = armorPerks.find( cr.Stat[ ST_CURRENT_ARMOR_PERK ] ) != -1;
	
	float weight = powerArmor ? 0 : ItemsWeight( cr );
	float max_weight = cr.Stat[ ST_CARRY_WEIGHT ] * 0.7;
	float weight_penalty = 5.0 * weight / max_weight;
	
	cr.ParamBase[ QST_AP_COST_RUN ] = 100 * ( 1 + weight_penalty );
	//Log( "AP cost for running: " + cr.ParamBase[ QST_AP_COST_RUN ] );
}

#endif // __SERVER

#endif //CRITTER_ITEM_MOVEMENT