#ifndef GENERAL_UNSAFE
#define GENERAL_UNSAFE

#include "_utils.fos"
#include "wait_time_h.fos"
#include "npc_planes_h.fos"
#include "firestarter_h.fos"
#include "terminal_h.fos"
#include "vending_h.fos"
#include "fish_h.fos"
#include "combat_h.fos"
#include "repair_h.fos"
#include "gateway_h.fos"
#include "lockers_h.fos"
#include "furniture_h.fos"
#include "casino_h.fos"
#include "gm_h.fos"
#include "windup_h.fos"
#include "handcuffs_h.fos"

import void critter_reload_weapon( Critter& cr, Item& weapon, Item@ ammo ) from "main";
import bool critter_use_item( Critter& cr, Item& item, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint param ) from "main";
import void ShowInputBoxScreen( Critter& cr, string funcName, uint16 textLength, uint8 flags ) from "main";

import void Actions( Critter& cr, uint8 actionType, uint16 pickType ) from "context_callback";

import void tryGetSand( Critter& cr, Item& shovel, int hexX, int hexY ) from "digging";

import void DragAndDrop( Critter& cr, Critter@ target ) from "gameplay";

import Item@ getPopup( Critter& player ) from "popups";
import bool changePopup( Critter& player, string description ) from "popups";
import bool delPopup( Critter& player ) from "popups";

import bool e_UseAutoCloseDoor( Item& door, Critter& cr, int skill ) from "item";

const string[] glass_break_sounds = { "glass_break1.ogg", "glass_break2.ogg", "glass_break3.ogg", "glass_break4.ogg" };

bool Action( Critter& player, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen )
{
	uint16 moverHexX = player.HexX, moverHexY = player.HexY, aimHexX = 0, aimHexY = 0;
	if( valid( targetCr ) )
	{ 
		aimHexX = targetCr.HexX;   
		aimHexY = targetCr.HexY;
	}
	else if( valid( targetItem ) )
	{ 
		aimHexX = targetItem.HexX; 
		aimHexY = targetItem.HexY; 
	}
	else if( valid( targetScen ) )
	{ 
		aimHexX = targetScen.HexX;
		aimHexY = targetScen.HexY; 
	}
	else
	{
		return false;
	}

	uint dist = GetDistantion( moverHexX, moverHexY, aimHexX, aimHexY );
	if( dist > 1 )
	{ 
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_FAR ); 
		return false; 
	}
	uint8 dir = GetDirection( moverHexX, moverHexY, aimHexX, aimHexY );
	player.SetDir( dir );
	player.Action( ACTION_PICK_CRITTER, 3, null );
	return true;
}

void unsafe_OpenDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( player.IsDead() || player.IsKnockout() || player.IsBusy() || player.Timeout[ TO_SK_STEAL ] > 0 )
	{
		return;
	}

	Map@ map = player.GetMap();
	uint16 hexX, hexY;
	uint8 dir;
	for( uint8 i = 0; i < 6; i++ )
	{
		hexX = player.HexX;
		hexY = player.HexY;
		dir = ( player.Dir + i + 2 ) % 6;
		map.MoveHexByDir( hexX, hexY, dir, 1 );
		Item@ door = map.GetDoor( hexX, hexY );
		if( valid( door ) )
		{
			if( !Action( player, null, door, null ) )
			{
				break;
			}
			player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
			UseSkillOnLocker( player, door, SKILL_PICK_ON_GROUND );
			e_UseAutoCloseDoor( door, player, -1 );

			Critter@[] critters;
			uint8 crs = map.GetCrittersHex( door.HexX, door.HexY, 30, FIND_ALL | FIND_ONLY_PLAYERS, critters );
			for( uint8 i = 0, l = critters.length(); i < l; i++ ) { critters[ i ].RunClientScript( "client_main@SoundDoor", critters[ i ].Id, door.Id, 0, null, null ); }
			break;
		}
	}
}

void unsafe_MobGoHome( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( !isGM( player ) )
	{
		return;
	}
	Critter@ target = GetCritter( param0 );
	if( valid(target) && !target.IsPlayer() )
	{
		if( target.ModeBase[ MODE_NO_HOME ] != 0 )
		{
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SEND_CR_HOME, "$npc" + param0 );
		}
		else
		{	
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CR_IS_HOME, "$npc" + param0 );
		}
		target.ModeBase[ MODE_NO_HOME ] = 0;
	}
}

void unsafe_radioHead( Critter& cr, int, int, int, string@ message, int[]@ ) 
{
	Item@[] items;
	if( cr.GetItems( -1, items ) > 0 )
	{
		for( uint i = 0, l = items.length; i < l; i++ )
		{
			if( FLAG( items[i].Flags, ITEM_RADIO ) )
			{
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_USE_RADIO );
			}
		}
	}		
}

void unsafe_contmenu_callback( Critter& player, int id, int screenId, int actionId, string@ command, int[] @ myArr )
{
    player.StatBase[ ST_LAST_CRIT_ID ] = myArr[ ARRAY_ID_INDEX ];
    player.StatBase[ ST_OBJECT_TYPE ] = myArr[ ARRAY_OBJ_INDEX ];
    player.StatBase[ ST_ITEM_HEXX ] = myArr[ ARRAY_ITEM_HEXX ];
    player.StatBase[ ST_ITEM_HEXY ] = myArr[ ARRAY_ITEM_HEXY ];
    player.StatBase[ ST_ITEM_PID ] = myArr[ ARRAY_ITEM_PID ];


    switch( myArr[ ARRAY_SCREEN_INDEX ] )
    {
		case SCREEN_BAG:
			player.ShowScreen( myArr[ ARRAY_SCREEN_INDEX ], id, "context_callback@ScreenBag" );
			break;
		case SCREEN_SKILLBOX:
			player.ShowScreen( myArr[ ARRAY_SCREEN_INDEX ], id, "context_callback@ScreenSkillbox" );
			break;
		case ACTION_PICK_ITEM:
			Actions( player, myArr[ ARRAY_SCREEN_INDEX ], 0 );
			break;
		case ACTION_PICK_CRITTER:
			Actions( player, myArr[ ARRAY_SCREEN_INDEX ], myArr[ ARRAY_PICK_TYPE ] );
			break;
		case ACTION_DIR:
			Actions( player, myArr[ ARRAY_SCREEN_INDEX ], 0 );
			break;
		case ACTION_TALK:
			Actions( player, myArr[ ARRAY_SCREEN_INDEX ], 0 );
			break;
		case ACTION_FAST:
			Actions( player, myArr[ ARRAY_SCREEN_INDEX ], myArr[ ARRAY_SKILL_INDEX ] );
			break;
		default:
			break;
    }

}

//Log commands # $ ~
void unsafe_log(Critter& cr, int locX, int locY, int type, string@ message, int[] @ p4 )
{
    file f;
    if( f.open( "logs\\commandslog.txt", "a" ) >= 0 )
    {
        f.writeString( __Day + "." + __Month + "." + __Year + " " + MakeTime( __FullSecond ) + message + "\n" );
        f.close();
    }
}

//Log GM panel actions
void unsafe_log_2(Critter& cr, int locX, int locY, int type, string@ message, int[] @ p4 )
{
    file f;
    if( f.open( "logs\\gm_panel.txt", "a" ) >= 0 )
    {
        f.writeString( __Day + "." + __Month + "." + __Year + " " + MakeTime( __FullSecond ) + message + "\n" );
        f.close();
    }
}

//Digits input for ingame items
void unsafe_inputDigits( Critter& player, int itemId, int digits, int param2, string@ param3, int[] @ param4 )
{
    Item@ item = GetItem( itemId );
	if( valid( item ) )
	{
		uint16 Pid = item.GetProtoId();
		if( vending_machines.find( Pid ) != -1 )
		{
			item.Val6 = digits;
			StartMenuVendingMachine( player, item );
		}
		else if( Pid == PID_TERMINAL )
		{
			if( item.Val6 == 0 )
			{
				item.Val6 = digits;
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEW_PASSWORD, "$digits" + digits );
			}
			else if( item.Val6 == digits )
			{
				item.Val8 = 0;
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CORRECT_PASSWORD );
			}
			else
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_PASSWORD );
			}
			StartMenuTerminal( player, item );
		}
		else if( Pid == PID_JUKEBOX1 || Pid == PID_JUKEBOX2 || Pid == PID_JUKEBOX3 || Pid == PID_JUKEBOX4 )
		{
			item.Val6 = digits;
			StartMenuJukebox( player, item );
		}
		player.RunClientScript( "client_screen_numberpad@HideScreen", 0, 0, 0, "", null );
	}
}

void unsafe_openCodeDoor( Critter& player, int itemId, int code, int param2, string@ param3, int[] @ param4 )
{
    Item @ item = GetItem( itemId );
    if( !valid( item ) )
	{
		return;
	}
	
    if( ( player.HexX < item.HexX + 2 || player.HexX > item.HexX - 2 ) && ( player.HexY < item.HexY + 2 || player.HexY > item.HexY - 2 ) )
	{
		if( param2 != 0 )
		{
            if( code >= pow( 10, item.Val1 ) )
			{
                item.Val4 = code;
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEW_CODE, "$digits" + code );
                return;
            }
			else
			{
                player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_UNACCEPTABLE_CODE );
                return;
            }
		}
        
		if( item.Val4 == code )
		{
            if( _LockerIsClose( item ) )
			{
                item.LockerOpen();
                player.RunClientScript( "client_screen_codedoor@HideScreen", 0, 0, 0, "", null );
				
				if( item.GetType() == ITEM_TYPE_DOOR )
				{
					Map@ map = player.GetMap();
					ToggleDoorBlocker( map, item, false );
				}
				
				if( item.GetType() == ITEM_TYPE_CONTAINER )
				{
					ShowContainer( player, item, item.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
				}
            }
		}
		else
		{
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_CODE );
		}
    }
	else
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_FAR );
	}
}

void unsafe_hex_attack( Critter& cr, int hexX, int hexY, int wpn_pid, string@ command, int[] @ param4 )
{
	if( cr.IsBusy() )
	{
		return;
	}
	
    Map@ map = cr.GetMap();

    if( map is null )
	{
        return;
	}
	Item@ hand = _CritGetItemHand(cr);
    uint8 mode = 0;
	
	ProtoItem@ weapon, ammo;
	if( valid( hand ) )
	{
		mode = hand.Mode;
		@weapon = GetProtoItem( hand.GetProtoId() );
	}
	else
	{
		@weapon = cr.GetSlotProto( SLOT_HAND1, mode );//unarmed
	}

	if( !valid( weapon ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_FIGHT );
		return;
	}

    uint16 toHx = hexX, toHy = hexY;
    int dist = GetDistantion( cr.HexX,  cr.HexY, hexX, hexY );
	
    map.GetHexCoord( cr.HexX,  cr.HexY, toHx, toHy,  0.0f, dist );
    if( ( hexX != toHx ) || ( hexY != toHy ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, 104 );
        return;
    }
    
    int wpnMaxDist = _WeaponMaxDist( weapon, mode );
    if( _WeaponSkill( weapon, mode ) == SK_THROWING )
	{
		wpnMaxDist = MIN( wpnMaxDist, 3 * MIN( int(10), cr.Stat[ ST_STRENGTH ] ) );
	}
	
    if( dist > wpnMaxDist )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, 102 );
        return;
    }

	if( valid( hand ) )
	{
		bool isFlareGun = ( hand.AmmoPid == PID_FLARE_GUN_AMMO ) && ( mode == 1 );
		uint[] rocket_pids = { PID_EXPLOSIVE_ROCKET, PID_ROCKET_AP, PID_ROBO_ROCKET_AMMO, PID_GRENADELAUNCHER_AMMO };
		bool isRocket = rocket_pids.find( hand.AmmoPid ) != -1;
	
		bool brokenArm = cr.Damage[ DAMAGE_LEFT_ARM ] + cr.Damage[ DAMAGE_RIGHT_ARM ] > 0;
		bool brokenTwoArms = cr.Damage[ DAMAGE_LEFT_ARM ] * cr.Damage[ DAMAGE_RIGHT_ARM ] > 0;
		
		if( brokenTwoArms )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, STR_COMBAT_NEED_DMG_TWO_ARMS );
			return;
		}

		if( FLAG( hand.Flags, ITEM_TWO_HANDS ) && brokenArm )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, STR_COMBAT_NEED_DMG_ARM );
			return;
		}
	}
	
	uint windupTime = GetProtoWindupTime( weapon, mode, cr );
	if( windupTime == 0 )
	{
		windupTime == 300;
	}
	
	uint8 weaponMode = mode;
	mode = weaponMode;
	int skillNum = ( valid( weapon ) ? _WeaponSkill( weapon, 0 ) : ( valid( hand ) ? SK_MELEE_WEAPONS : SK_UNARMED ) );
	uint8 weaponSubtype = ( skillNum == SK_SMALL_GUNS || skillNum == SK_BIG_GUNS || skillNum == SK_ENERGY_WEAPONS ) ? WS_GUN : 
					( ( skillNum == SK_THROWING ) ? WS_THROWING : ( skillNum == SK_MELEE_WEAPONS ) ? WS_MELEE : WS_UNARMED );
	
	if( weapon.Weapon_MaxAmmoCount > 0 )
	{
		if( hand.AmmoCount == 0 )
		{
			uint8 dir = GetDirection( cr.HexX, cr.HexY, toHx, toHy );
			cr.SetDir( dir );
			
			if( weaponSubtype == WS_GUN )
			{
				cr.Action( ACTION_WINDUP, ACTION_FLAG_CHOSEN_INCLUSIVE << 12 | mode, valid( hand ) ? hand : null );
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP );
			}
			else
			{
				cr.Action( ACTION_USE_WEAPON, ACTION_FLAG_CHOSEN_INCLUSIVE << 12 | mode, valid( hand ) ? hand : null );
			}

			uint[] values = { cr.Id, weapon.ProtoId };
			CreateTimeEvent( AFTER( REAL_MS( windupTime ) ), "e_emptySFX", values, false );
			cr.ParamBase[ CR_IS_WINDUPED ] = 1;
			return;
		}
		else
		{
			@ammo = GetProtoItem( hand.AmmoPid );
		}
	}

	int needAP = 0;
	
	if( _WeaponModeAim( mode ) == HIT_LOCATION_NONE && _WeaponAim( weapon, mode & 0x0F ) )
	{
		mode = ( weaponMode & 0x0F ) + ( cr.ParamBase[CR_AUTO_AIM] << 4 );
		
		if( cr.ParamBase[CR_AUTO_AIM] != HIT_LOCATION_NONE )
		{
			int delta = int( _WeaponApCost( weapon, weaponMode ) ) * 0.2;
			needAP += delta; // + 20% AP for aim attacks
		}
	}
	
	needAP += int( _WeaponApCost( weapon, weaponMode ) );
	
	if( cr.Stat[ ST_CURRENT_AP ] < needAP )
	{
        return;
	}
	
    cr.StatBase[ ST_CURRENT_AP ] -= needAP * 100;

    Critter@ target = map.GetCritter( uint16( hexX ), uint16( hexY ) );

	uint targetId = valid( target ) ? target.Id : 0;
	uint ammoPID = valid( ammo ) ? ammo.ProtoId : 0;
	uint[] vals = { cr.Id, targetId, weapon.ProtoId, mode, ammoPID, hexX, hexY };
	
	cr.SetDir( GetDirection( cr.HexX, cr.HexY, hexX, hexY ) );
	if( cr.ParamBase[ CR_IS_WINDUPED ] == 0 )
	{
		uint8 weapon_Subtype = valid( weapon ) ? weapon.Item_Subtype : 0;
		if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_NORMAL_MINIGUN )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COMBAT_SPIN_BARRELS );
			return;
		}
		cr.Wait( windupTime );
	}
	else
	{
		cr.Wait( 10 );
		windupTime = 0;
	}
	
	if( weapon.Windup_Time != 0 && !_ItemIsBroken( hand ) && GetDeteriorationProcent( hand ) < 100 )
	{
		cr.Action( ACTION_WINDUP, ACTION_FLAG_CHOSEN_INCLUSIVE << 12 | mode, hand );
		cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP );
		CreateTimeEvent( AFTER( REAL_MS( windupTime ) ), "combat@e_DelayedAttack", vals, false );
	}
	else
	{
		CombatAttack( cr, target, weapon, mode, ammo, hexX, hexY );
		cr.Wait( GetProtoTime( weapon, mode, cr ) );
	}
}

uint e_emptySFX( uint[]@ values )
{
	Critter@ cr = GetCritter( values[0] );
	int radius = 5;
	Critter@[] players;
	int hx = cr.HexX, hy = cr.HexY;
	cr.GetMap().GetCrittersHex( hx, hy, radius, FIND_ALL | FIND_ONLY_PLAYERS, players );
	int[] vals = { values[1], 4, radius };
	for( uint i = 0; i < players.length(); i++ )
	{
		Critter@ player = players[i];
		if( valid( player ) )
		{
			player.RunClientScript( "fofmod@__PlayWeaponSound", cr.Id, hx, hy, "LAUGHTE1.mp3", vals );
		}
	}
	return 0;
}

void unsafe_hex_useItem( Critter& cr, int hexX, int hexY, int itm_pid, string@ command, int[] @ param4 )
{
	Item@ usedItem = _CritGetItemHand( cr );
	uint16 usedItemPid = usedItem.GetProtoId();
	if( usedItemPid == PID_ROD_STRING_HOOK )
	{
		uint8 throwDir = GetDirection( cr.HexX, cr.HexY, hexX, hexY );
		cr.SetDir( throwDir );
		PrepareFishing( cr, usedItem, hexX, hexY );
	}
	
	if( usedItemPid == PID_SHOVEL || usedItemPid == PID_SPADE )
	{
		uint8 digDir = GetDirection( cr.HexX, cr.HexY, hexX, hexY );
		cr.SetDir( digDir );
		tryGetSand( cr, usedItem, hexX, hexY );
	}
}

void unsafe_stopMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = uint( 10 + param0 * 10 ); i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_GM_ACCESS );
            return;
        }
		
        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ClearEnemyStack();
            controlled.EraseTimeEvents( 9 );
            controlled.SetDir( GetDirection( controlled.HexX, controlled.HexY, param1, param2 ) );
        }
    }
}

void unsafe_moveMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = uint( 10 + param0 * 10 ); i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_GM_ACCESS );
            return;
        }
		
        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            AddWalkPlane( controlled, 1, param1 + Random( -i, i ), param2 + Random( -i, i ), GetDirection( controlled.HexX, controlled.HexY, param1, param2 ), valid( param3 ), 0 );
            if( param0 == 0 )
			{
                controlled.ClearEnemyStack();
			}
		}
    }
}

void unsafe_attackMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );
    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_GM_ACCESS );
            return;
        }
		
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            AddAttackPlane( controlled, 0, target, __RunOnCombat );
            controlled.AddEnemyInStack( target.Id );
        }
    }
}

void unsafe_chaseMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );
    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_GM_ACCESS );
            return;
        }
		
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.StatBase[ ST_KILLER_PERSON ] = target.Id;
            controlled.AddTimeEvent( "follow", 30, 9 );
        }
    }
}

uint follow( Critter& cr, int master, uint& rate )
{
    int8 y = 0;
    cr.ClearEnemyStack();
    Critter@ daddy = GetCritter( cr.Stat[ ST_KILLER_PERSON ] );
    Map@ daddymap = null;
    Map@ crmap = cr.GetMap();
	
    if( valid( daddy ) )
	{
        @daddymap = daddy.GetMap();
	}
	else
	{
        return 0;
	}
	
	cr.ErasePlane( -1, true );

    if( ( !valid( daddymap ) ) && ( valid( crmap ) ) )
    {
        cr.TransitToGlobalGroup( daddy.Id );
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( daddymap.Id == crmap.Id ) )
    {
        AddWalkPlane( cr, 0, daddy.HexX, daddy.HexY, GetDirection( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ), false, 1 );
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( crmap.Id != daddymap.Id ) )
    {
        uint8 findPos = 1;
        while( findPos <= 10 )
        {
            if( daddymap.IsHexPassed( daddy.HexX + findPos, daddy.HexY + findPos ) )
            {
                cr.TransitToMap( daddymap.Id, daddy.HexX + findPos, daddy.HexY + findPos, Random( 0, 5 ) );
                findPos = 10;
            }
            findPos++;
        }
    }
    return 30;
}

void unsafe_say( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ controlled = GetCritter( param0 );
    if( param1 != 1 && param1 != 5 && controlled.IsPlayer() )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_GM_ACCESS );
        return;
    }
    if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_GM_ACCESS );
        return;
    }
    say( player, param0, param1, 0 );
}

void unsafe_sleep( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 )
{
	if( player.IsDead() )
	{
		player.ParamBase[ CR_SLEEPING_STATE ] = 0;
	} 
	else if( player.IsKnockout() && player.Param[ CR_SLEEPING_STATE ] > 0 )
    {
		if( player.Param[ CR_SLEEPING_STATE ] == 3 && isRemote == 0 )
		{
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_CANT_GET_UP );
			return;
		}
		player.ParamBase[ CR_SLEEPING_STATE ] = 0;
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GET_UP );
		SayLog( player, crInfo( player ) + " gets up." );
    }
	else if( !player.IsKnockout() )
    {
        player.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( isBack == 0 ) ), 101, player.HexX, player.HexY );
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_LIE_DOWN );
		SayLog( player, crInfo( player ) + " lies down." );
		player.ParamBase[ CR_SLEEPING_STATE ] = 1 + isBack;
		if( isRemote == 1 )
		{
			player.ParamBase[ CR_SLEEPING_STATE ] = 3;
		}
    }
}

void unsafe_itemhit2( Critter& player, int itemId, int x, int y, string@ param3, int[] @ param4 )
{
    if( player.IsDead() || player.IsKnockout() )
	{
		return;
	}
	
	if ( player.Timeout[ TO_SK_STEAL ] > 0 )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_KNOCK_TOO_MUCH );
		return;
	}
	if( ABS( int(x - player.HexX) ) <= 1 && ABS( int(y - player.HexY) ) <= 1 )
	{
		player.SetDir( GetDirection( player.HexX, player.HexY, x, y ) );
		Map@ map = player.GetMap();
		if( !valid( map ) )
		{
			return;
		}
		map.SetTextMsg( x, y, COLOR_GRAY, TEXTMSG_TEXT, STR_MAPMSG_BANG );
		
        Item@[] items;
		
		uint16 hexX = player.HexX, hexY = player.HexY;
		map.MoveHexByDir( hexX, hexY, player.Dir, 1 );
		map.GetItems( hexX, hexY, items );
		
		for( uint i = 0, len = items.length(); i < len; i++ )
		{
			if( items[i].GetType() == ITEM_TYPE_DOOR )
			{
				UseSkillOnLocker( player, items[i], SKILL_PICK_ON_GROUND );
			}
		}
		
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_KNOCKED );
		SayLog( player, crInfo( player ) + " knocks on (" + x + ":" + y + ")." );
		player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
		return;
	}
	else
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_FAR );
	}
	return;			
}

void unsafe_itemhit( Critter& player, int id, int itemId, int param2, string@ param3, int[] @ param4 )
{
    Critter @ target = GetCritter( id );

    if( player.IsDead() || player.IsKnockout() )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_DO_THAT );
		return;
	}
	
	if( !valid( target ) )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MISS_KNOCK );
		return;
	}
	
	if( player.Timeout[ TO_SK_STEAL ] > 0 )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_KNOCK_TOO_MUCH );
		return;
	}
	
	if( target.IsDead() || target.IsKnockout())
	{	
		DragAndDrop( player, target );
		player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 3 );
		return;
	}		
	
	if( ABS( int(target.HexX - player.HexX) ) <= 1 && ABS( int(target.HexY - player.HexY) ) <= 1 )
	{
		Item@ weapon = _CritGetItemHand( player );
		SayLog( player, crInfo( player ) + " bangs on: " + crInfo( target, true ) + "." );

		if( !(weapon is null) )
		{
			uint16 weight = weapon.Proto.Weight;
			weight = CLAMP( weight, 2000, 8000 );
			uint8  ap = weight * 0.001;
			ap = CLAMP( ap, 20, 80 );
			
			if( ap <= player.Stat[ ST_CURRENT_AP ] )
			{
				player.SetDir( GetDirection( player.HexX, player.HexY, target.HexX, target.HexY ) );
				_CritAnimateThrow( player );
				player.Wait ( 1000 );
				player.StatBase[ ST_CURRENT_AP ] -= ap * 100;
				
				if ( player.Skill[ SK_MELEE_WEAPONS ] - target.Stat[ ST_ARMOR_CLASS ] - ( weight * 0.002 ) < Random( 0, 100) )
				{
					player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MISS_KNOCK );
					return;
				}
				uint8 strBonus = ( player.Stat[ ST_STRENGTH ] > 6 ? player.Stat[ ST_STRENGTH ] - 6 : 1 );
				int damage = strBonus + player.StatBase[ ST_MELEE_DAMAGE ] + Random( 0, weight * 0.002 );
				InjureCritter( target, damage, DAMAGE_NORMAL, target.Dir, player.Id );
				
				player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
				player.TimeoutBase[ TO_AGGRESSOR ] = __FullSecond + REAL_MINUTE( 1 );

				if( target.IsNpc() && target.IsSee( player ) )
				{
					target.AddEnemyInStack( player.Id );
				}
				return;
			}
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOT_ENOUGH_AP );
			return;
		}
		else if( 40 <= player.Stat[ ST_CURRENT_AP ] )
		{
			player.SetDir( GetDirection( player.HexX, player.HexY, target.HexX, target.HexY ) );
			_CritAnimateThrow( player );
			player.Wait ( 1000 );
			player.StatBase[ ST_CURRENT_AP ] -= 40 * 100;
			
			if ( player.Skill[ SK_UNARMED ] - target.Stat[ ST_ARMOR_CLASS ] < Random( 0, 100) )
			{
				player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MISS_KNOCK );
				return;
			}
			uint8 strBonus = ( player.Stat[ ST_STRENGTH ] > 6 ? player.Stat[ ST_STRENGTH ] - 6 : 1 );
			int damage = Random( strBonus, strBonus + player.StatBase[ ST_MELEE_DAMAGE ] + 1 );           // every 500g 1dmg point
			InjureCritter( target, damage, DAMAGE_NORMAL, target.Dir, player.Id );
			
			player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
			player.TimeoutBase[ TO_AGGRESSOR ] = __FullSecond + REAL_MINUTE( 1 );

			if( target.IsNpc() && target.IsSee( player ) )
			{
				target.AddEnemyInStack( player.Id );
			}
			return;
		}
		else
		{
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOT_ENOUGH_AP );
		}
		return;			
	}
	else
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_FAR );
	}
}

void unsafe_itemthrow ( Critter& player, int hx, int hy, int param2, string@ param3, int[] @ param4 ) 
{
	if( player.IsBusy() || player.Stat[ ST_CURRENT_AP ] < 50 )
	{
		return;
	}
	
	uint16 tx = hx, ty = hy;
	uint distance = GetDistantion( player.HexX, player.HexY, hx, hy );
	Map@ currentMap = player.GetMap ();

	if( !valid(currentMap) || player.IsDead() || player.IsKnockout() || distance > uint( player.Stat [ST_STRENGTH] * 2 ) )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_FAR_TO_THROW );
		return;
	}
	
	currentMap.GetHexCoord( player.HexX,  player.HexY, tx, ty,  0.0f, distance );
	Critter@ target = currentMap.GetCritter( tx, ty );

	Item@[] items;
	Item@ container;
	uint count = currentMap.GetItems( tx, ty, items );
	for( uint i = 0; i < count; i++ )
	{
		if( items[i].GetType() == ITEM_TYPE_CONTAINER && ( !items[i].Proto.Container_Changeble || FLAG( items[i].LockerCondition, LOCKER_ISOPEN ) ) )
		{
			@container = @items[i];
			break;
		}
	}
	
	if( !currentMap.IsHexPassed( tx, ty ) && !valid(target) && !valid(container) )
	{
		currentMap.GetHexCoordWall( player.HexX,  player.HexY, tx, ty,  0.0f, distance );
	}
	
	Item@ itemInHand = _CritGetItemHand( player );
	if( !valid( itemInHand ) )
	{
		return;
	}
	
	uint pid = itemInHand.GetProtoId();
	uint[] impossibles = { PID_WORKBENCH_TOKEN, PID_FIREPLACE_TOKEN };
	if( impossibles.find( pid ) > -1 || ( itemInHand.Proto.Item_Subtype == ITEM_SUBTYPE_BONDAGE && itemInHand.BONDAGE_STATE == BONDAGE_STATE_ON ) )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_THROW );
		return;
	}

	SayLog( player, crInfo( player ) + " throws " + itemName( pid ) + " to (" + tx + ":" + ty + ")." );

	player.SetDir( GetDirection( player.HexX, player.HexY, tx, ty ) );
	if( valid(target) && !target.IsDead() )
	{
		bool targetFreeHands = ( _CritGetItemHand ( target ) is null );
		if( targetFreeHands && !( target is player ) )
		{
			MoveItem( itemInHand, 1, target);
			target.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_CATCHES );
		}
		else
		{
			MoveItem( itemInHand, 1, currentMap, tx, ty);
			if( !( target is player ) )
			{ 
				target.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_CATCH_FAIL );
			}
		}
	}
	else
	{
		if( valid( container ) && FLAG( itemInHand.Flags, ITEM_NO_BLOCK ) && !currentMap.IsHexPassed( tx, ty ) && !FLAG( container.Flags, ITEM_CAN_PICKUP ) )
		{
			MoveItem( itemInHand, 1, container, 0 );
			CheckCartPicMap( container );
		}
		
		if( find_any_glass( itemInHand ) != 0 )
		{
			uint break_chance = Random( 1, 100 );
			if ( break_chance >= 20 )
			{
				currentMap.PlaySound( glass_break_sounds[ Random( 0, glass_break_sounds.length() -1 ) ], tx, ty, 10 );
				uint total_break_chance = Random( 0, 2 );
				
				if( total_break_chance != 2 || find_other_glass( itemInHand ) )
				{
					currentMap.SetTextMsg( tx, ty, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_BREAKS );
				}
				else
				{
					currentMap.AddItem( tx, ty, PID_ROSETTE, 1 );
				}
				_SubItem( itemInHand , 1 );
			}
			else
			{
				MoveItem( itemInHand, 1, currentMap, tx, ty );
			}
		}
		else if ( pid == PID_OIL_LAMP && itemInHand.Val0 != 0 )
		{
			_SubItem( itemInHand , 1 );
			GenerateFire( currentMap, tx, ty, 1, 1, player.Id );
		}
		else
		{
			if( itemInHand.IsStackable() )
			{
				_SubItem( itemInHand, 1 );
				Item@ thrownItem = currentMap.AddItem( tx, ty, pid, 1 );
				uint[] values = { thrownItem.Id };
				CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "critter_item_movement@e_stack_items", values, true );
			}
			else
			{
				MoveItem( itemInHand, 1, currentMap, tx, ty );
			}
		}
	}
	
	currentMap.RunFlyEffect( _WeaponEffect( GetProtoItem(PID_FRAG_GRENADE), _WeaponModeUse (0) ), player, target, player.HexX, player.HexY, tx, ty );
	_CritAnimateThrow (player);
	player.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_THROW );
	player.Wait( 200 * 5 ); 
	player.ParamBase[ ST_CURRENT_AP ] -= 50 * 100;
}

void unsafe_selfLex( Critter& player, int, int, int, string@ text, int[]@ )
{
    if( !valid(text) || text == "" )
	{
		player.SetLexems( null );
	}
	else
	{
		player.SetLexems( text );
	}
	player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CHANGE_LEX_SELF );
}

void unsafe_newPopup( Critter& player, int x, int y, int, string@ text, int[]@ )
{
	if( player.ParamBase[ QST_GAMEMODE ] == GAME_START ) return;
	
	Item@ popup = getPopup( player );
	if( valid( popup ) && ( popup.Val0 == 0 ) && !isGM( player ) )
	{
		return;
	}
	
	if( isGM( player) && x != 0 && y != 0 )
	{
		player.ParamBase[CR_VAL0] = x;
		player.ParamBase[CR_VAL1] = y;
	}
	
	if( !valid(text) || text == "" )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_MAKE_DESC );
		ShowInputBoxScreen( player, "general_unsafe@unsafe_PopupDescInput#Description:", 0, INPUTBOX_CLOSE_ON_ENTER );
	}
	
	else
	{
		popupDescInput( player, substring( text, 1, text.length() - 1 ) );
	}
}

void unsafe_PopupDescInput( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	popupDescInput( player, param3 );
}

void PopupDescInput( Critter& player, uint answerI, string& answerS )
{
	popupDescInput( player, answerS );
}

void popupDescInput( Critter& player, string @answerS = null )
{
    if( !valid(player) )
	{
		return;
	}
	
    if( valid( answerS ) && answerS.length() > 0 )
	{
        if( changePopup( player, answerS ) )
		{
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTICE_DESC );
        }
		else
		{
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FAILED_DESC );
        }
    }
	else
	{
        if( delPopup( player ) )
		{
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVED_DESC );
        }
		else
		{
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FAILED_REMOVE_DESC );
        }
    }
}

void unsafe_pushing( Critter& player, int type, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( player.IsBusy() || player.IsDead() || player.IsKnockout() || player.StatBase[ ST_CURRENT_AP ] < 0 || player.Mode[ MODE_NO_PVP ] != 0 )
	{
		return;
	}
	
	Map@ map = player.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	uint16 x = player.HexX, y = player.HexY;
	map.MoveHexByDir( x, y, player.Dir, 1 );
	Critter@ target = map.GetCritter( x, y );
	
	if( valid( target ) && target.Mode[ MODE_NO_PVP ] == 0 )
	{
		player.Wait( 1000 );
		player.Action( ACTION_PICK_CRITTER, 2, null );
		player.ParamBase[ ST_CURRENT_AP ] -= 5000;
		
		if( ( target.IsPlayer() || ( target.IsNoPlanes() && target.GetTalkedPlayers( null ) == 0 ) ) && target.Mode[MODE_NO_PUSH] == 0 )
		{
			if( target.IsDead() || target.IsKnockout() )
			{
				map.MoveHexByDir( x, y, player.Dir, 1 );
				target.TransitToHex( x, y, player.Dir, 0 );
			}
			else
			{
				target.MoveToDir( player.Dir );
			}
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUSH_TARGET );
			SayLog( player, crInfo( player ) + " pushes " + crInfo( target ) + "." );
		}
		else
		{
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TARGET_RESIST );
			SayLog( player, crInfo( player ) + " with no success tried to push: " + crInfo( target ) + "." );
		}
	}
}

void unsafe_getNaked( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	getNaked( player );
}

void getNaked( Critter& cr )
{
	if( cr.ParamBase[ ST_BODY_TYPE ] >= BT_SUPER_MUTANT ) //not man, woman, child
	{
		return;
	}
	bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
	uint crType = cr.Stat[ ST_BASE_CRTYPE ];

	if( true )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_UNDRESS );
		cr.Animate( 0, ANIM2_USE, null, false, true );
		cr.Animate( 0, ANIM2_PICKUP, null, false, true );
		
		Item@ armor = cr.GetItem( 0, SLOT_ARMOR );
		
		if( valid( armor ) )
		{
			_CritMoveItem( cr, armor, SLOT_INV );
		}
		else
		{
			cr.ParamBase[ ST_BASE_CRTYPE ] = isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F;
			cr.ChangeCrType( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		}
	}
}

void unsafe_KnockSay( Critter& cr, int sayType, int param1, int param2, string@ message, int[]@ ) 
{ 
	cr.Say( sayType, message ); 
}

void unsafe_animation( Critter& cr, int type, int val, int targetId, string@, int[]@ )
{
	Critter@ target = @cr;
	if( isGM( cr ) && targetId != 0 )
	{
		@target = GetCritter( targetId );
	}
	
	if( !valid( target ) || target.IsDead() || target.IsKnockout() )
	{
		return;
	}
	
	if( type == ACTION_WINDUP )
	{
		ChangeWindup( target, false );
	}
	else
	{
		if( isGM( cr ) )
		{
			target.Action( type, val == 0 ? Random( 0, 1 ) : val - 1, null );
		}
		else
		{
			if( target.Stat[ ST_CURRENT_AP ] >= 20 )
			{
				target.Action( type, val == 0 ? Random( 0, 1 ) : val - 1, null );
				target.ParamBase[ ST_CURRENT_AP ] -= 20 * 100;
				target.Wait( 200 );
			}
		}
	}
}

//Shiv writing + lex
void unsafe_MakeDescLex( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	MakeDescLex( player, 0, param3 );
}

void MakeDescLex( Critter& player, uint answerI, string& answerS )
{
    if( !valid( player ) )
	{
		return;
    }
	int item_id = player.Stat[ ST_LAST_DOOR_ID ];
    int accessory = player.Stat[ ST_LAST_CONT_ID ];
    Item@ target;
    Map@ map = player.GetMap();
    switch( accessory ) {
        case( ACCESSORY_NONE ):
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
			break;
        case( ACCESSORY_CRITTER ):   
			@target = player.GetItemById(item_id);
			break;
        case( ACCESSORY_HEX ):
		{
			if( valid( map ) )
			{
				@target = map.GetItem(item_id);
			}
			break;
		}
        case( ACCESSORY_CONTAINER ):
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TAKE_ITEM_OUT );
			break;
        default: 
			player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMETHING_WENT_WRONG );
			break;
    }
	
    if( !valid(target) )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_NOT_FOUND );
        return;
    }
   
	target.SetLexems( null );
    if( answerS.length() > 1 )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DESCRIPTION_MADE );
        target.SetLexems( answerS );
    }
	else
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DESCRIPTION_REMOVED );
    }
    target.Update();
}	

#endif // GENERAL_UNSAFE