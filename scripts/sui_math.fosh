#ifndef __SUI_MATH__
    #define __SUI_MATH__

    // Void vector
    shared class Vector0D 
    {}

    // 1D vector / single math variable
    shared class Vector1D
    {
        private Vector1D@ Origin;

        private float Value;

        Vector1D(float value) final {
            this.Value = value;
        }

        bool HasOrigin() {
            return null is this.Origin;
        }

        void SetOrigin(Vector1D@ origin) {
            @this.Origin = origin;
        }

        Vector1D@ GetOrigin() {
            return this.Origin;
        }

        Vector1D@ Recalculate(Vector0D@ ref = null) {
            if (null !is this.Origin) {
                this.Origin.Recalculate(ref);
            }
            return this;
        }

        void Calculate() {
            return;
        }

        Formula1D@ opAdd(Vector1D@ right) {
            return Add1D(this, right);
        }

        Formula1D@ opSub(Vector1D@ right) {
            return Sub1D(this, right);
        }

        Formula1D@ opMul(Vector1D@ right) {
            return Mul1D(this, right);
        }

        Formula1D@ opDiv(Vector1D@ right) {
            return Div1D(this, right);
        }

        Formula1D@ opMod(Vector1D@ right) {
            return Mod1D(this, right);
        }

        Formula1D@ get_Sqrt() {
            return Sqrt1D(this);
        }

        float get_Float() {
            return this.Origin is null ? this.Value : this.Origin.Float + this.Value;
        }

        void set_Float(float value) {
            this.Value = value;
        }

        void opAssign(float value) {
            this.Float = value;
        }

        bool get_Bool() {
            return 0.0f != this.Float;
        }

        void set_Bool(bool value) {
            this.Value = value ? 1.0f : 0.0f;
        }

        void opAssign(bool value) {
            this.Bool = value;
        }

        string get_String() {
            return this.Origin is null ? "" + this.Float : "(" + this.Origin.get_String() + "+" + this.Value + ")=" + this.Float;
        }

        int get_Int() {
            return int(this.Float);
        }

        void set_Int(int value) {
            this.Value = float(value);
        }

        void opAssign(int value) {
            this.Int = value;
        }

        uint8 get_Uint8() {
            return uint8(this.Float);
        }

        void set_Uint8(uint8 value) {
            this.Value = float(value);
        }

        void opAssign(uint8 value) {
            this.Uint8 = value;
        }

        uint16 get_Uint16() {
            return uint16(this.Float);
        }

        void set_Uint16(uint16 value) {
            this.Value = float(value);
        }

        void opAssign(uint16 value) {
            this.Uint16 = value;
        }

        uint get_Uint() {
            return uint(this.Float);
        }

        void set_Uint(uint value) {
            this.Value = float(value);
        }

        void opAssign(uint value) {
            this.Uint = value;
        }
    }

    shared class Vector2D 
    {
        Vector1D@ X;
        Vector1D@ Y;

        Vector2D(Vector1D@ x, Vector1D@ y) final {
            @this.X = x;
            @this.Y = y;
        }
    }

    // Basic math operation template
    shared class Formula1D : Vector1D
    {
        Vector0D@ Ref;

        Vector1D@ Left;

        Formula1D(Vector1D@ left) final {
            super(0.0f);
            @this.Left = left;
        }

        Vector1D@ Recalculate(Vector0D@ ref = null) override {
            // Prevent operation from refreshing twice in the same formula call
            if (null is ref) @ref = Vector0D();
            else if (ref is this.Ref) return this;
            @this.Ref = ref;

            this.Left.Recalculate(ref);

            this.Calculate();
            return this;
        }

        void Calculate() override {
            this.Float = this.Left.Float;
        }

        string get_String() override {
            return "[" + this.Left.String + "]" + this.Float;
        }
    }

    shared class Sqrt1D : Formula1D
    {
        Sqrt1D(Vector1D@ left) final {
            super(left);
        }

        void Calculate() override {
            this.Float = sqrt(this.Left.Float);
        }

        string get_String() override {
            return "[" + this.Left.String + "^0.5]=" + this.Float;
        }
    }

    shared class Expression1D : Formula1D
    {
        Vector1D@ Right;
        
        Expression1D(Vector1D@ left, Vector1D@ right) final {
            super(left);
            @this.Right = right;
        }

        Vector1D@ Recalculate(Vector0D@ ref = null) override {
            // Prevent operation from refreshing twice in the same formula call
            if (null is ref) @ref = Vector0D();
            else if (ref is this.Ref) return this;
            @this.Ref = ref;

            this.Left.Recalculate(ref);
            this.Right.Recalculate(ref);

            this.Calculate();
            return this;
        }

        string get_String() override {
            return "{" + this.Left.String + "," + this.Right.String + "}=" + this.Float;
        }
    }

    shared final class Add1D : Expression1D 
    {
        Add1D(Vector1D@ left, Vector1D@ right) final {
            super(left, right);
        }

        void Calculate() override {
            this.Float = this.Left.Float + this.Right.Float;
        }

        string get_String() override {
            return "{" + this.Left.String + "+" + this.Right.String + "}=" + this.Float;
        }
    }

    shared final class Sub1D : Expression1D
    {
        Sub1D(Vector1D@ left, Vector1D@ right) final {
            super(left, right);
        }

        void Calculate() override {
            this.Float = this.Left.Float - this.Right.Float;
        }

        string get_String() override {
            return "{" + this.Left.String + "-" + this.Right.String + "}=" + this.Float;
        }
    }

    shared final class Mul1D : Expression1D
    {
        Mul1D(Vector1D@ left, Vector1D@ right) final {
            super(left, right);
        }
        
        void Calculate() override {
            this.Float = this.Left.Float * this.Right.Float;
        }

        string get_String() override {
            return "{" + this.Left.String + "*" + this.Right.String + "}=" + this.Float;
        }
    }

    shared final class Div1D : Expression1D
    {
        Div1D(Vector1D@ left, Vector1D@ right) final {
            super(left, right);
        }
        
        void Calculate() override {
            this.Float = this.Left.Float / this.Right.Float;
        }

        string get_String() override {
            return "{" + this.Left.String + "/" + this.Right.String + "}=" + this.Float;
        }
    }

    shared final class Mod1D : Expression1D
    {
        Mod1D(Vector1D@ left, Vector1D@ right) final {
            super(left, right);
        }
        
        void Calculate() override {
            this.Float = this.Left.Float % this.Right.Float;
        }

        string get_String() override {
            return "{" + this.Left.String + "%" + this.Right.String + "}=" + this.Float;
        }
    }

    /*
    final class DDDD {
        DDDD() {
            Log("vvvvvvvvvvvvvvvvvvv");

            Vector1D x(12.0f);
            Vector1D y(13.0f);
            Vector1D z(27.5f);
            Formula1D@ formula = (x + y) / z;
            formula.Recalculate();
            Log(formula.String);
            Vector1D@ f = Vector1D(100.0f);
            f.SetOrigin(formula);
            Log(f.String);
            x = 31.0f;
            z = 10.0f;
            formula.Recalculate();
            Log(formula.String);
            Log((f - x).Sqrt.Recalculate().String);

            Log("^^^^^^^^^^^^^^^^^^^");
        }
    }
    DDDD@ d = DDDD();
    */
#endif
